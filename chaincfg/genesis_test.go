// Copyright (c) 2014-2016 The btcsuite developers
// Copyright (c) 2018 The Flo developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

// TestGenesisBlock tests the genesis block of the main network for validity by
// checking the encoded bytes and hashes.
func TestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

// TestRegTestGenesisBlock tests the genesis block of the regression test
// network for validity by checking the encoded bytes and hashes.
func TestRegTestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

// TestTestNet3GenesisBlock tests the genesis block of the test network (version
// 3) for validity by checking the encoded bytes and hashes.
func TestTestNet3GenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

// TestSimNetGenesisBlock tests the genesis block of the simulation test network
// for validity by checking the encoded bytes and hashes.
func TestSimNetGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := SimNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSimNetGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), simNetGenesisBlockBytes) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(simNetGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := SimNetParams.GenesisBlock.BlockHash()
	if !SimNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SimNetParams.GenesisHash))
	}
}

// genesisBlockBytes are the wire encoded bytes for the genesis block of the
// main network as of protocol version 60002.
var genesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x2b, 0xab, /* |.....#+.| */
	0xa7, 0x29, 0x1c, 0x9d, 0x84, 0x4b, 0xb2, 0x48, /* |.)...K.H| */
	0x67, 0xaa, 0xfe, 0x45, 0x3e, 0xa7, 0xe2, 0x90, /* |g..E>...| */
	0x68, 0x56, 0x12, 0x55, 0x2d, 0x59, 0x5a, 0xdc, /* |hV.U-YZ.| */
	0x8d, 0x0c, 0x0f, 0x73, 0x8c, 0x40, 0xbf, 0x51, /* |...s.@.Q| */
	0xf0, 0xff, 0x0f, 0x1e, 0xa4, 0x81, 0x9c, 0x3b, /* |.......;| */
	0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x41, 0x53, 0x6c, 0x61, 0x73, 0x68, /* |..ASlash| */
	0x64, 0x6f, 0x74, 0x20, 0x2d, 0x20, 0x31, 0x37, /* |dot - 17| */
	0x20, 0x4a, 0x75, 0x6e, 0x65, 0x20, 0x32, 0x30, /* | June 20| */
	0x31, 0x33, 0x20, 0x2d, 0x20, 0x53, 0x61, 0x75, /* |13 - Sau| */
	0x64, 0x69, 0x20, 0x41, 0x72, 0x61, 0x62, 0x69, /* |di Arabi| */
	0x61, 0x20, 0x53, 0x65, 0x74, 0x20, 0x54, 0x6f, /* |a Set To| */
	0x20, 0x42, 0x61, 0x6e, 0x20, 0x57, 0x68, 0x61, /* | Ban Wha| */
	0x74, 0x73, 0x41, 0x70, 0x70, 0x2c, 0x20, 0x53, /* |tsApp, S| */
	0x6b, 0x79, 0x70, 0x65, 0xff, 0xff, 0xff, 0xff, /* |kype....| */
	0x01, 0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, /* |....*...| */
	0x00, 0x43, 0x41, 0x04, 0x01, 0x84, 0x71, 0x0f, /* |.CA...q.| */
	0xa6, 0x89, 0xad, 0x50, 0x23, 0x69, 0x0c, 0x80, /* |...P#i..| */
	0xf3, 0xa4, 0x9c, 0x8f, 0x13, 0xf8, 0xd4, 0x5b, /* |.......[| */
	0x8c, 0x85, 0x7f, 0xbc, 0xbc, 0x8b, 0xc4, 0xa8, /* |........| */
	0xe4, 0xd3, 0xeb, 0x4b, 0x10, 0xf4, 0xd4, 0x60, /* |...K...`| */
	0x4f, 0xa0, 0x8d, 0xce, 0x60, 0x1a, 0xaf, 0x0f, /* |O...`...| */
	0x47, 0x02, 0x16, 0xfe, 0x1b, 0x51, 0x85, 0x0b, /* |G....Q..| */
	0x4a, 0xcf, 0x21, 0xb1, 0x79, 0xc4, 0x50, 0x70, /* |J.!.y.Pp| */
	0xac, 0x7b, 0x03, 0xa9, 0xac, 0x00, 0x00, 0x00, /* |.{......| */
	0x00, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x46, /* |..text:F| */
	0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x63, 0x6f, 0x69, /* |lorincoi| */
	0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, /* |n genesi| */
	0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, /* |s block | */
}

// regTestGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the regression test network as of protocol version 60002.
var regTestGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x2b, 0xab, /* |.....#+.| */
	0xa7, 0x29, 0x1c, 0x9d, 0x84, 0x4b, 0xb2, 0x48, /* |.)...K.H| */
	0x67, 0xaa, 0xfe, 0x45, 0x3e, 0xa7, 0xe2, 0x90, /* |g..E>...| */
	0x68, 0x56, 0x12, 0x55, 0x2d, 0x59, 0x5a, 0xdc, /* |hV.U-YZ.| */
	0x8d, 0x0c, 0x0f, 0x73, 0x8d, 0xb5, 0xbd, 0x51, /* |...s...Q| */
	0xff, 0xff, 0x7f, 0x20, 0x00, 0x00, 0x00, 0x00, /* |... ....| */
	0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x41, 0x53, 0x6c, 0x61, 0x73, 0x68, /* |..ASlash| */
	0x64, 0x6f, 0x74, 0x20, 0x2d, 0x20, 0x31, 0x37, /* |dot - 17| */
	0x20, 0x4a, 0x75, 0x6e, 0x65, 0x20, 0x32, 0x30, /* | June 20| */
	0x31, 0x33, 0x20, 0x2d, 0x20, 0x53, 0x61, 0x75, /* |13 - Sau| */
	0x64, 0x69, 0x20, 0x41, 0x72, 0x61, 0x62, 0x69, /* |di Arabi| */
	0x61, 0x20, 0x53, 0x65, 0x74, 0x20, 0x54, 0x6f, /* |a Set To| */
	0x20, 0x42, 0x61, 0x6e, 0x20, 0x57, 0x68, 0x61, /* | Ban Wha| */
	0x74, 0x73, 0x41, 0x70, 0x70, 0x2c, 0x20, 0x53, /* |tsApp, S| */
	0x6b, 0x79, 0x70, 0x65, 0xff, 0xff, 0xff, 0xff, /* |kype....| */
	0x01, 0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, /* |....*...| */
	0x00, 0x43, 0x41, 0x04, 0x01, 0x84, 0x71, 0x0f, /* |.CA...q.| */
	0xa6, 0x89, 0xad, 0x50, 0x23, 0x69, 0x0c, 0x80, /* |...P#i..| */
	0xf3, 0xa4, 0x9c, 0x8f, 0x13, 0xf8, 0xd4, 0x5b, /* |.......[| */
	0x8c, 0x85, 0x7f, 0xbc, 0xbc, 0x8b, 0xc4, 0xa8, /* |........| */
	0xe4, 0xd3, 0xeb, 0x4b, 0x10, 0xf4, 0xd4, 0x60, /* |...K...`| */
	0x4f, 0xa0, 0x8d, 0xce, 0x60, 0x1a, 0xaf, 0x0f, /* |O...`...| */
	0x47, 0x02, 0x16, 0xfe, 0x1b, 0x51, 0x85, 0x0b, /* |G....Q..| */
	0x4a, 0xcf, 0x21, 0xb1, 0x79, 0xc4, 0x50, 0x70, /* |J.!.y.Pp| */
	0xac, 0x7b, 0x03, 0xa9, 0xac, 0x00, 0x00, 0x00, /* |.{......| */
	0x00, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x46, /* |..text:F| */
	0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x63, 0x6f, 0x69, /* |lorincoi| */
	0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, /* |n genesi| */
	0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, /* |s block | */
}

// testNet3GenesisBlockBytes are the wire encoded bytes for the genesis block of
// the test network (version 3) as of protocol version 60002.
var testNet3GenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x2b, 0xab, /* |.....#+.| */
	0xa7, 0x29, 0x1c, 0x9d, 0x84, 0x4b, 0xb2, 0x48, /* |.)...K.H| */
	0x67, 0xaa, 0xfe, 0x45, 0x3e, 0xa7, 0xe2, 0x90, /* |g..E>...| */
	0x68, 0x56, 0x12, 0x55, 0x2d, 0x59, 0x5a, 0xdc, /* |hV.U-YZ.| */
	0x8d, 0x0c, 0x0f, 0x73, 0x8d, 0xb5, 0xbd, 0x51, /* |...s...Q| */
	0xf0, 0xff, 0x0f, 0x1e, 0x43, 0xa6, 0xa3, 0x3b, /* |....C..;| */
	0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x41, 0x53, 0x6c, 0x61, 0x73, 0x68, /* |..ASlash| */
	0x64, 0x6f, 0x74, 0x20, 0x2d, 0x20, 0x31, 0x37, /* |dot - 17| */
	0x20, 0x4a, 0x75, 0x6e, 0x65, 0x20, 0x32, 0x30, /* | June 20| */
	0x31, 0x33, 0x20, 0x2d, 0x20, 0x53, 0x61, 0x75, /* |13 - Sau| */
	0x64, 0x69, 0x20, 0x41, 0x72, 0x61, 0x62, 0x69, /* |di Arabi| */
	0x61, 0x20, 0x53, 0x65, 0x74, 0x20, 0x54, 0x6f, /* |a Set To| */
	0x20, 0x42, 0x61, 0x6e, 0x20, 0x57, 0x68, 0x61, /* | Ban Wha| */
	0x74, 0x73, 0x41, 0x70, 0x70, 0x2c, 0x20, 0x53, /* |tsApp, S| */
	0x6b, 0x79, 0x70, 0x65, 0xff, 0xff, 0xff, 0xff, /* |kype....| */
	0x01, 0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, /* |....*...| */
	0x00, 0x43, 0x41, 0x04, 0x01, 0x84, 0x71, 0x0f, /* |.CA...q.| */
	0xa6, 0x89, 0xad, 0x50, 0x23, 0x69, 0x0c, 0x80, /* |...P#i..| */
	0xf3, 0xa4, 0x9c, 0x8f, 0x13, 0xf8, 0xd4, 0x5b, /* |.......[| */
	0x8c, 0x85, 0x7f, 0xbc, 0xbc, 0x8b, 0xc4, 0xa8, /* |........| */
	0xe4, 0xd3, 0xeb, 0x4b, 0x10, 0xf4, 0xd4, 0x60, /* |...K...`| */
	0x4f, 0xa0, 0x8d, 0xce, 0x60, 0x1a, 0xaf, 0x0f, /* |O...`...| */
	0x47, 0x02, 0x16, 0xfe, 0x1b, 0x51, 0x85, 0x0b, /* |G....Q..| */
	0x4a, 0xcf, 0x21, 0xb1, 0x79, 0xc4, 0x50, 0x70, /* |J.!.y.Pp| */
	0xac, 0x7b, 0x03, 0xa9, 0xac, 0x00, 0x00, 0x00, /* |.{......| */
	0x00, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x46, /* |..text:F| */
	0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x63, 0x6f, 0x69, /* |lorincoi| */
	0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, /* |n genesi| */
	0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, /* |s block | */
}

// simNetGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the simulation test network as of protocol version 70002.
var simNetGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x2b, 0xab, /* |.....#+.| */
	0xa7, 0x29, 0x1c, 0x9d, 0x84, 0x4b, 0xb2, 0x48, /* |.)...K.H| */
	0x67, 0xaa, 0xfe, 0x45, 0x3e, 0xa7, 0xe2, 0x90, /* |g..E>...| */
	0x68, 0x56, 0x12, 0x55, 0x2d, 0x59, 0x5a, 0xdc, /* |hV.U-YZ.| */
	0x8d, 0x0c, 0x0f, 0x73, 0x45, 0x06, 0x86, 0x53, /* |...sE..S| */
	0xff, 0xff, 0x7f, 0x20, 0x02, 0x00, 0x00, 0x00, /* |... ....| */
	0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x41, 0x53, 0x6c, 0x61, 0x73, 0x68, /* |..ASlash| */
	0x64, 0x6f, 0x74, 0x20, 0x2d, 0x20, 0x31, 0x37, /* |dot - 17| */
	0x20, 0x4a, 0x75, 0x6e, 0x65, 0x20, 0x32, 0x30, /* | June 20| */
	0x31, 0x33, 0x20, 0x2d, 0x20, 0x53, 0x61, 0x75, /* |13 - Sau| */
	0x64, 0x69, 0x20, 0x41, 0x72, 0x61, 0x62, 0x69, /* |di Arabi| */
	0x61, 0x20, 0x53, 0x65, 0x74, 0x20, 0x54, 0x6f, /* |a Set To| */
	0x20, 0x42, 0x61, 0x6e, 0x20, 0x57, 0x68, 0x61, /* | Ban Wha| */
	0x74, 0x73, 0x41, 0x70, 0x70, 0x2c, 0x20, 0x53, /* |tsApp, S| */
	0x6b, 0x79, 0x70, 0x65, 0xff, 0xff, 0xff, 0xff, /* |kype....| */
	0x01, 0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, /* |....*...| */
	0x00, 0x43, 0x41, 0x04, 0x01, 0x84, 0x71, 0x0f, /* |.CA...q.| */
	0xa6, 0x89, 0xad, 0x50, 0x23, 0x69, 0x0c, 0x80, /* |...P#i..| */
	0xf3, 0xa4, 0x9c, 0x8f, 0x13, 0xf8, 0xd4, 0x5b, /* |.......[| */
	0x8c, 0x85, 0x7f, 0xbc, 0xbc, 0x8b, 0xc4, 0xa8, /* |........| */
	0xe4, 0xd3, 0xeb, 0x4b, 0x10, 0xf4, 0xd4, 0x60, /* |...K...`| */
	0x4f, 0xa0, 0x8d, 0xce, 0x60, 0x1a, 0xaf, 0x0f, /* |O...`...| */
	0x47, 0x02, 0x16, 0xfe, 0x1b, 0x51, 0x85, 0x0b, /* |G....Q..| */
	0x4a, 0xcf, 0x21, 0xb1, 0x79, 0xc4, 0x50, 0x70, /* |J.!.y.Pp| */
	0xac, 0x7b, 0x03, 0xa9, 0xac, 0x00, 0x00, 0x00, /* |.{......| */
	0x00, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x46, /* |..text:F| */
	0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x63, 0x6f, 0x69, /* |lorincoi| */
	0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, /* |n genesi| */
	0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, /* |s block | */
}
